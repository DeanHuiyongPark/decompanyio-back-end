swagger: "2.0"
info:
  description: "Decompany Rest Api"
  version: "2019-02-28T01:00:44Z"
  title: "dev-backend-restapis"
  termsOfService: "https://www.google.com"
  contact:
    name: "Jay"
    email: "jay@decompany.io"
  license:
    name: "Decompany"
    url: "https://www.decompany.io"
host: "j5hgenjo04.execute-api.us-west-1.amazonaws.com"
basePath: "/dev"
schemes:
- "https"
paths:
  /api/account/get:
    get:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-accountGet/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /api/account/picture:
    post:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-accountPicture/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /api/account/sync:
    post:
      responses: {}
      security:
      - accountAuth: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-accountSync/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/account/update:
    post:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-accountUpdate/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /api/curator/document/list:
    post:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-curatorDocumentCuratingList/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/curator/document/today:
    post:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-ListTodayVotedDocumentByCurator/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/document/download/{accountId}/{documentId}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-documentDownload/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/document/info/{documentId}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-documentInfo/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/document/list:
    post:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-documentList/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/document/regist:
    post:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-documentRegist/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/document/text/{documentId}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-documentText/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/document/vote/{documentId}:
    post:
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-documentVote/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/oraclize/viewcount:
    get:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-oraclizeController/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /api/tracking/collect:
    get:
      summary: "tracking collector"
      description: "collector for user's event tracking"
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "query"
        description: "client id"
        required: true
        type: "string"
      - name: "ev"
        in: "query"
        description: "event type [view, leave]"
        required: false
        type: "string"
      - name: "sid"
        in: "query"
        description: "session id"
        required: true
        type: "string"
      - name: "e"
        in: "query"
        description: "email"
        required: false
        type: "string"
      - name: "t"
        in: "query"
        description: "event timestamp"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/DefaultResponse"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-trackingCollect/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/tracking/info:
    get:
      summary: "tracking summary list"
      description: "tracking summary list"
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "query"
        description: "client id"
        required: true
        type: "string"
      - name: "documentid"
        in: "query"
        description: "document id"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/DefaultResponse"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-trackingInfo/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
  /api/tracking/list:
    get:
      summary: "tracking detail list"
      description: "tracking detail list"
      produces:
      - "application/json"
      parameters:
      - name: "documentid"
        in: "query"
        description: "document id"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/DefaultResponse"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-trackingList/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Credentials:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'false'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{statusCode:200}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "mock"
securityDefinitions:
  accountAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerUri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:197966029048:function:backend-restapis-dev-accountAuth/invocations"
      authorizerResultTtlInSeconds: 300
      type: "token"
definitions:
  DefaultResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
      resultList:
        type: "array"
    title: "ResponseModel"
    description: "default response"
x-amazon-apigateway-documentation:
  version: "1.0"
  createdDate: "2019-02-28T01:24:24Z"
  documentationParts:
  - location:
      type: "API"
    properties:
      info:
        version: "1"
        title: "Rest API"
        description: "Decompany Rest Api"
        termsOfService: "https://www.google.com"
        contact:
          name: "Jay"
          email: "jay@decompany.io"
        license:
          name: "Decompany"
          url: "https://www.decompany.io"
  - location:
      type: "METHOD"
      path: "/api/tracking/collect"
      method: "GET"
    properties:
      description: "collector for user's event tracking"
      summary: "tracking collector"
  - location:
      type: "METHOD"
      path: "/api/tracking/info"
      method: "GET"
    properties:
      description: "tracking summary list"
      summary: "tracking summary list"
  - location:
      type: "METHOD"
      path: "/api/tracking/list"
      method: "GET"
    properties:
      description: "tracking detail list"
      summary: "tracking detail list"
  - location:
      type: "MODEL"
      name: "DefaultResponse"
    properties:
      description: "default response"
  - location:
      type: "MODEL"
      name: "ErrorResponse"
    properties:
      description: "This is an error"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/collect"
      method: "GET"
      name: "cid"
    properties:
      description: "client id"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/info"
      method: "GET"
      name: "cid"
    properties:
      description: "client id"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/info"
      method: "GET"
      name: "documentid"
    properties:
      description: "document id"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/list"
      method: "GET"
      name: "documentid"
    properties:
      description: "document id"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/collect"
      method: "GET"
      name: "e"
    properties:
      description: "email"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/collect"
      method: "GET"
      name: "ev"
    properties:
      description: "event type [view, leave]"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/collect"
      method: "GET"
      name: "sid"
    properties:
      description: "session id"
  - location:
      type: "QUERY_PARAMETER"
      path: "/api/tracking/collect"
      method: "GET"
      name: "t"
    properties:
      description: "event timestamp"
  - location:
      type: "RESPONSE_BODY"
      path: "/api/tracking/collect"
      method: "GET"
      statusCode: "200"
    properties:
      description: "Response body description"
  - location:
      type: "RESPONSE_BODY"
      path: "/api/tracking/info"
      method: "GET"
      statusCode: "200"
    properties:
      description: "Response body description"
  - location:
      type: "RESPONSE_BODY"
      path: "/api/tracking/list"
      method: "GET"
      statusCode: "200"
    properties:
      description: "Response body description"
