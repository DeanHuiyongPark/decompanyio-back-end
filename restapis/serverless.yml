# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend-restapis # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  # you can overwrite defaults here
  stage: ${opt:stage, 'local'}
  region: us-west-1
  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name
  #apiName: ${self:service.name}-api      # Api Gateway Name
  environment:
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    servicename: ${self:service.name}
    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:*
       - s3:*
       - logs:*
       - sqs:*
       - kinesis:*
      Resource: "*"
# you can add statements to the Lambda function's IAM Role here
  vpc:
    securityGroupIds:
      - sg-05a13849fc117801b
    subnetIds:
      - subnet-37594850
      - subnet-38bb9963

# you can define service wide environment variables here
  #environment:
  #  CROS: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

package:
   individually: true

exclude:
  - .gitignore
  - .env

functions:  
  tagList:
    handler: controllers/tag/list.handler
    events:
      - http: get /api/tags

  s3DocumentUploadComplete:
    handler: s3/document/uploadComplete.handler
    events:
      - existingS3: 
        bucket: dev-ca-document
        events:
          - s3:ObjectCreated:Put
        rules:
          - prefix: FILE/

  s3DocumentConvertComplete:
    handler: s3/document/convertComplete.handler
    events:
      - existingS3: 
        bucket: dev-ca-document
        events: 
          - s3:ObjectCreated:Put
        rules:
          - prefix: THUMBNAIL/

  accountPicture:
    handler: controllers/account/picture.handler
    events:
      - http: post /api/account/picture

  accountGet:
    handler: controllers/account/gethandler
    events:
      - http: get /api/account/get

  accountUpdate:
    handler: controllers/account/update.handler
    events:
      - http: post /api/account/update

  accountAuth:
    handler: controllers/account/auth.handler
    
  accountSync:
    handler: controllers/account/sync.handler
    events:
      - http: 
          path: /api/account/sync
          method: post
          cors: true
          authorizer: accountAuth

  oraclizeController:
    handler: controllers/oraclizeController/index.handler
    events:
      - http: get /api/oraclize/viewcount

  documentRegist:
    handler: controllers/documentController.regist
    events:
      - http:
          path: api/document/regist
          method: post
          cors: true

  documentList:
    handler: controllers/documentController.list
    events:
      - http:
          path: api/document/list
          method: post
          cors: true

  curatorDocumentCuratingList:
    handler: controllers/documentController.listCuratorDocument
    events:
      - http:
          path: api/curator/document/list
          method: post
          cors: true

  ListTodayVotedDocumentByCurator:
    handler: controllers/documentController.listTodayVotedDocumentByCurator
    events:
      - http:
          path: api/curator/document/today
          method: post
          cors: true

  trackingList:
    handler: controllers/tracking/list.handler
    events:
      - http: 
          path: /api/tracking/list
          method: get
          cors: true
          documentation:
            summary: "tracking detail list"
            description: tracking detail list
            queryParams:
              - name: documentid
                description: document id
                type: string
                required: true
              
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  trackingInfo:
    handler: controllers/tracking/info.handler
    events:
      - http: 
          path: api/tracking/info
          method: get
          cors: true
          documentation:
            summary: "tracking summary list"
            description: tracking summary list
            queryParams:
              - name: documentid
                type: string
                description: document id
                required: true
              - name: cid
                description: client id
                type: string
                required: true
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  trackingCollect:
    handler: controllers/tracking/collect.handler
    events:
      - http: 
          path: api/tracking/collect
          method: get
          cors: true
          documentation:
            summary: "tracking collector"
            description: "collector for user's event tracking"
            queryParams:
              - name: cid
                description: client id
                type: string
                required: true
              - name: sid
                description: session id
                type: string
                required: true
              - name: t
                description: event timestamp
                type: number
                required: true
              - name: e
                description: email
                type: string
              - name: ev
                description: event type [view, leave]
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

              

  documentInfo:
    handler: controllers/documentController.info
    events:
      - http:
          path: api/document/info/{documentId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  documentText:
    handler: controllers/documentController.text
    events:
      - http:
          path: api/document/text/{documentId}
          method: get
          cors: true
          request:
            parameters:
                paths:
                  id: true

  documentVote:
    handler: controllers/documentController.vote
    events:
      - http:
          path: api/document/vote/{documentId}
          method: post
          cors: true
          request:
            parameters:
                paths:
                  id: true
            

  documentDownload:
    handler: controllers/documentController.downloadFile
    events:
      - http:
          path: api/document/download/{accountId}/{documentId}
          method: get
          cors: true
          request:
            parameters:
                paths:
                  id: true

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    RestApiLogGroup: #AccessLog Log Group
      Type: AWS::Logs::LogGroup 
      Properties:
        RetentionInDays: "3"
        LogGroupName: LogGroup-${self:provider.stage}-${self:service}
#    DocumentBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: dev-ca-document
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  serverless-offline:
    port: 4080
  documentation:
    api:
      info:
        version: '1'
        title: Rest API
        description: Decompany Rest Api
        termsOfService: https://www.google.com
        contact:
          name: Jay
          email: jay@decompany.io
        license:
          name: Decompany
          url: https://www.decompany.io
    models:
      -
        name: "ErrorResponse"
        description: "This is an error"
        contentType: "application/json"
        schema: ${file(models/error.json)}
      -
        name: "DefaultResponse"
        description: "default response"
        contentType: "application/json"
        schema: ${file(models/default_response.json)}
plugins:
  - serverless-offline
  - serverless-aws-documentation
  - serverless-mocha-plugin
  - serverless-plugin-existing-s3
