# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: blue-bottle-backend # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  # you can overwrite defaults here
  stage: dev
  region: us-west-1
  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name
  #apiName: ${self:service.name}-api      # Api Gateway Name
  environment:
    message: "Deploy stage ${self:provider.stage}"
    stage: ${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:*
       - s3:*
       - logs:*
      Resource: "*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  #environment:
  #  CROS: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
deploymentBucket:
    name: dev-ca-deploys-blue-bottle-backend # Overwrite the default deployment bucket

package:
   individually: true

exclude:
  - .gitignore
  - .env

functions:

  documentRegist:
    handler: controllers/documentController.regist
    events:
      - http:
          path: api/document/regist
          method: post
          cors: true

  documentList:
    handler: controllers/documentController.list
    events:
      - http:
          path: api/document/list
          method: post
          cors: true

  documentInfo:
    handler: controllers/documentController.info
    events:
      - http:
          path: api/document/info/{documentId}
          method: get
          cors: true
          request:
            parameters:
                paths:
                  id: true
          response:
            headers:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true

  documentText:
    handler: controllers/documentController.text
    events:
      - http:
          path: api/document/text/{documentId}
          method: get
          cors: true
          request:
            parameters:
                paths:
                  id: true
          response:
            headers:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true

  documentVote:
    handler: controllers/documentController.vote
    events:
      - http:
          path: api/document/vote/{documentId}
          method: post
          cors: true
          request:
            parameters:
                paths:
                  id: true
          response:
            headers:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true

  contractGetDocuments:
    handler: controllers/contractController.getDocuments
    timeout: 300 # optional, in seconds, default is 6, 5min
    events:
      - http:
          path: api/contract/getDocuments
          method: get
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true

  contractRegistYesterdayTotalViewCount:
    handler: controllers/contractController.registYesterdayTotalViewCount
    timeout: 300 # optional, in seconds, default is 6, 5min
    events:
      - http:
          path: api/contract/registYesterdayTotalViewCount
          method: post
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true

  registYesterdayViewCount:
    handler: functions/sqs/registYesterdayViewCount/index.handler
    timeout: 300 # optional, in seconds, default is 6, 5min
    reservedConcurrency: 1
    events:
      - sqs:
          arn: arn:aws:sqs:us-west-1:197966029048:DEV-CA-SC-VIEWCOUNT
          batch: 1
          enabled: true

  registYesterdayTotalViewCount:
    handler: functions/sqs/registYesterdayTotalViewCount/index.handler
    timeout: 300 # optional, in seconds, default is 6, 5min
    reservedConcurrency: 1
    events:
      - sqs:
          arn: arn:aws:sqs:us-west-1:197966029048:DEV-CA-SC-TOTALVIEWCOUNT
          batch: 1
          enabled: true



  contractInfo:
    handler: functions/contract/contractInfo/index.handler



#  cronViewCount:
#    handler: batch/cronViewCount.handler
#    events:
#      - schedule: rate(10 minutes)
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  serverless-offline:
    port: 4000


plugins:
  - serverless-offline
  - serverless-mocha-plugin
